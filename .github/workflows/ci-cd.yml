name: DocsFlow CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Lint documentation
      run: python scripts/lint_docs.py
      
    - name: Validate YAML files
      run: python scripts/validate_yaml.py

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build documentation
      run: mkdocs build --strict
      
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation-site
        path: site/
        retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: docsflow:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'docsflow:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy to Fluid Topics
    runs-on: ubuntu-latest
    needs: [build-docs, docker-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build documentation
      run: mkdocs build --strict
      
    - name: Deploy to Fluid Topics
      env:
        FLUID_URL: ${{ secrets.FLUID_URL }}
        FLUID_USER: ${{ secrets.FLUID_USER }}
        FLUID_PASS: ${{ secrets.FLUID_PASS }}
      run: python scripts/upload_to_fluidtopics.py
      
    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#devops'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          DocsFlow deployment ${{ job.status }}!
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}